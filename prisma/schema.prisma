// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String           @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  aadharNumber   String?          @unique
  phoneNumber    String?          @unique
  accounts       Account[]
  sessions       Session[]
  Jobs           Job[]
  JobApplication JobApplication[]
  Vehicle        Vehicle[]

  role Role @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Job {
  id             String   @id @default(cuid())
  title          String
  description    String
  latitude       Float
  longitude      Float
  landmark       String
  completionDays Int
  wage           Float
  landArea       Float    @default(0)
  images         String[]
  requirements   Json?
  featured       Boolean  @default(false)
  for            For
  status         Status
  type           JobType
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  JobApplication JobApplication[]

  @@map("jobs")
}

model JobApplication {
  id        String            @id @default(cuid())
  jobId     String
  job       Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId    String
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    ApplicationStatus
  message   String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@map("job_applications")
}

model Vehicle {
  id             String      @id @default(cuid())
  name           String
  number         String
  type           VehicleType
  pricePerDay    Float
  description    String
  specifications Json
  images         String[]
  rentalTerms    Json

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vehicles")
}

enum Role {
  USER
  SELLER
}

enum For {
  LABOUR
  CONTRACTOR
  BOTH
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum VehicleType {
  TRACTOR
  TRUCK
  JCB
  HARVESTER
  COMBINE
  TRAILER
  CULTIVATOR
  PLOUGH
  PLANTER
}

enum JobType {
  HARVESTING
  IRRIGATION
  SOWING
  PLOUGHING
  CULTIVATION
  TRANSPORTATION
  LEVELING
  FERTILIZATION
  PESTICIDE_SPRAYING
  SEED_TREATMENT
  WEEDING
  PRUNING
  TRIMMING
  PLANTING
}
